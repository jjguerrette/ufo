# These tests are designed to check the behaviour of the `records_are_single_obs` thinning option
# together with its interaction with the use of a `category_variable`.

# There are eight profiles in the sample, each of which consists of two observations.
# Metadata values of the profiles are as follows:
# Location:   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15
# times (s):  245, 246, 250, 251, 255, 256, 265, 266, 280, 281, 285, 286, 290, 291, 295, 296
# station ID: 1,   1,   2,   2,   3,   3,   4,   4,   5,   5,   6,   6,   7,   7,   8,   8
# category:   1,   1,   2,   2,   1,   1,   2,   2,   1,   1,   2,   2,   1,   1,   2,   2

# The centre of the window is 270 s.
# In the Gaussian Thinning setup used, profiles closer to the centre of the bin are retained.


window begin: 2000-01-01T00:00:00Z
window end: 2030-01-01T00:00:00Z

observations:
# Setup:
# - Obs grouped into records by station_id
# - Records not treated as single obs
# - Category variable not used
# Results:
# - Only one observation is kept (closest to bin centre, location 7)
- obs space:
    name: Records are not single obs, no category variable
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
  passedObservationsBenchmark: [7]
  passedBenchmark: 1

# Setup:
# - Obs grouped into records by station_id
# - Records not treated as single obs
# - Category variable equal to station_id
# Results:
# - Thinning performed within each profile. Only one location kept in each case.
# - Locations with times closest to 270: 1, 3, 5, 7, 8, 10, 12, 14.
- obs space:
    name: Records are not single obs, category variable station_id
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    category_variable: station_id@MetaData
    distance_norm: maximum
  passedObservationsBenchmark: [1, 3, 5, 7, 8, 10, 12, 14]
  passedBenchmark: 8

# Setup:
# - Obs grouped into records by station_id
# - Records not treated as single obs
# - Category variable equal to category
# Results:
# - Category overrides division into records.
# - Thinning performed within each category. Only one location kept in each case.
# - Locations with times closest to 270: 7, 8
- obs space:
    name: Records are not single obs, category variable category
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    category_variable: category@MetaData
    distance_norm: maximum
  passedObservationsBenchmark: [7, 8]
  passedBenchmark: 2

# Setup:
# - Obs grouped into records by station_id
# - Records treated as single obs
# - Category variable not used
# Results:
# - Only one record is kept (closest to bin centre, locations 6 and 7)
- obs space:
    name: Records are single obs, no category variable
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
    records_are_single_obs: true
  passedObservationsBenchmark: [6, 7]
  passedBenchmark: 2

# Setup:
# - Obs grouped into records by station_id
# - Records treated as single obs
# - Category variable equal to station_id
# Results:
# - Each record is in a unique category
# - Nothing is thinned
- obs space:
    name: Records are single obs, category variable station_id
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
    records_are_single_obs: true
    category_variable: station_id@MetaData
  passedObservationsBenchmark: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  passedBenchmark: 16

# Setup:
# - Obs grouped into records by station_id
# - Records treated as single obs
# - Category variable equal to category
# Results:
# - One record in each category is kept
# - Locations with times closest to 270: 8, 9 (category 1), 6, 7 (category 2)
- obs space:
    name: Records are single obs, category variable category
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
    records_are_single_obs: true
    category_variable: category@MetaData
  passedObservationsBenchmark: [6, 7, 8, 9]
  passedBenchmark: 4

# Setup:
# - Obs grouped into records by category and station_id
# - Records treated as single obs
# - Category variable equal to category
# Notes:
# - Each category contains records on different processors
# Results:
# - One record in each category is kept
# - Locations with times closest to 270: 8, 9 (category 1), 6, 7 (category 2)
- obs space:
    name: Records are single obs, grouped by category and station_id, category variable category
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "category", "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
    records_are_single_obs: true
    category_variable: category@MetaData
  passedObservationsBenchmark: [6, 7, 8, 9]
  passedBenchmark: 4

# Setup:
# - Obs grouped into records by station_id
# - Records treated as single obs
# - Category variable equal to category_bad
# Results:
# - Expect an exception to be thrown
- obs space:
    name: Bad category used
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/thinning_records.nc4
      obsgrouping:
        group variables: [ "station_id" ]
    simulated variables: [air_temperature]
  obs filters:
  - filter: Gaussian Thinning
    filter variables: [air_temperature]
    horizontal_mesh: -1
    vertical_mesh: -1
    time_min: '2010-01-01T00:04:00Z'
    time_max: '2010-01-01T00:06:00Z'
    time_mesh: 'PT1M'
    distance_norm: maximum
    records_are_single_obs: true
    category_variable: category_bad@MetaData
  expectExceptionWithMessage: Cannot have multiple categories per record


